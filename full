export default async function handler(req, res) {
  const { firstName, title, city, state, company, domain } = req.body || {};

  if (!domain || !title || !company) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

  const getRegionFromState = (state) => {
    const regions = {
      "Northeast": ["NY", "NJ", "PA", "MA", "CT", "RI", "VT", "NH", "ME"],
      "Midwest": ["OH", "MI", "IN", "IL", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS"],
      "South": ["DE", "MD", "DC", "VA", "WV", "KY", "NC", "SC", "GA", "FL", "AL", "MS", "TN", "AR", "LA", "TX"],
      "West": ["MT", "WY", "CO", "NM", "ID", "UT", "AZ", "NV"],
      "Pacific": ["CA", "OR", "WA", "AK", "HI"]
    };
    for (const region in regions) {
      if (regions[region].includes(state)) return region;
    }
    return "Unknown";
  };

  const getCityTier = (city) => {
    const major = [...]; // paste full list here
    const mid = [...];   // paste full list here

    if (!city) return "Unknown";
    if (major.includes(city)) return "Major";
    if (mid.includes(city)) return "Mid";
    return "Unknown";
  };

  const prompt = `
You're generating detailed enrichment for a cold outreach campaign targeting automotive franchise dealership General Sales Managers (GSMs).

Given:
- Name: ${firstName}
- Title: ${title}
- Dealership: ${company}
- Location: ${city}, ${state}
- Domain: ${domain}

Return exactly these 12 pipe-separated fields:
1. Franchise Group name ("Independent" if unsure)
2. Brands sold (comma-separated)
3. Buyer Score (1–5; higher for franchise, mobile, and complete data)
4. Top relevant pain points (comma-separated)
5. Personalized Hook (dealership-specific opener)
6. One-Sentence Value Prop
7. Region (Northeast, Midwest, South, West, Pacific)
8. City Tier (Major, Mid, Unknown)
9. Ideal Reference Client (real dealership or "Peer Dealer")
10. Validation Flag ("OK" or "Needs Check")
11. Safe to Send ("YES" if Buyer Score ≥4, else "NO")
12. Already Enriched ("YES")
`;

  const callOpenAI = async (model) => {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.3
      })
    });
    const json = await response.json();
    return json.choices?.[0]?.message?.content?.trim();
  };

  try {
    const domainRoot = domain.replace("www.", "").split(".")[0].toLowerCase();

    let output = await callOpenAI("gpt-3.5-turbo");
    const isWeak = !output || output.toLowerCase().includes(domainRoot) || output.split("|").length < 5;

    if (isWeak) {
      output = await callOpenAI("gpt-4");
    }

    const parts = output.split("|").map(p => p.trim());
    while (parts.length < 12) parts.push("");

    parts[6] = getRegionFromState(state);
    parts[7] = getCityTier(city);
    parts[10] = parseInt(parts[2]) >= 4 ? "YES" : "NO";
    parts[11] = "YES";

    return res.status(200).json({ parts });
  } catch (err) {
    return res.status(500).json({ error: "GPT failed", details: err.message });
  }
}
